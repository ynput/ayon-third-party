{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"3rd Party dependency","text":"<p>Binary dependency executables that are required for pipeline integration by AYON core plugin.</p>"},{"location":"index.html#intro","title":"Intro","text":"<p>AYON core requires ffmpeg and OpenImageIO tools for image processing. Both executables can be added as part of server addon so desktop application will download them on demand, or have settings where can be disabled that option and define different executable arguments that will be used instead. That can be configured per platform.</p> <p>Files are not part of repository and are downloaded on package creation. We do not expect the package creation to be done often, we hope that it should be done once a year with new releases of dependency binaries.</p>"},{"location":"index.html#how-to-start","title":"How to start","text":"<p>Run <code>./create_package.py</code> script which should download required files. Created package should be moved to server addons. Enable the addon on server, and that's it.</p>"},{"location":"index.html#issues","title":"Issues","text":"<p>We do not support binaries for all platforms. We do not supply <code>oiiotool</code> for MacOS.</p>"},{"location":"license.html","title":"License","text":"<pre><code>                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/\n</code></pre> <p>TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION</p> <ol> <li> <p>Definitions.</p> <p>\"License\" shall mean the terms and conditions for use, reproduction,   and distribution as defined by Sections 1 through 9 of this document.</p> <p>\"Licensor\" shall mean the copyright owner or entity authorized by   the copyright owner that is granting the License.</p> <p>\"Legal Entity\" shall mean the union of the acting entity and all   other entities that control, are controlled by, or are under common   control with that entity. For the purposes of this definition,   \"control\" means (i) the power, direct or indirect, to cause the   direction or management of such entity, whether by contract or   otherwise, or (ii) ownership of fifty percent (50%) or more of the   outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\"You\" (or \"Your\") shall mean an individual or Legal Entity   exercising permissions granted by this License.</p> <p>\"Source\" form shall mean the preferred form for making modifications,   including but not limited to software source code, documentation   source, and configuration files.</p> <p>\"Object\" form shall mean any form resulting from mechanical   transformation or translation of a Source form, including but   not limited to compiled object code, generated documentation,   and conversions to other media types.</p> <p>\"Work\" shall mean the work of authorship, whether in Source or   Object form, made available under the License, as indicated by a   copyright notice that is included in or attached to the work   (an example is provided in the Appendix below).</p> <p>\"Derivative Works\" shall mean any work, whether in Source or Object   form, that is based on (or derived from) the Work and for which the   editorial revisions, annotations, elaborations, or other modifications   represent, as a whole, an original work of authorship. For the purposes   of this License, Derivative Works shall not include works that remain   separable from, or merely link (or bind by name) to the interfaces of,   the Work and Derivative Works thereof.</p> <p>\"Contribution\" shall mean any work of authorship, including   the original version of the Work and any modifications or additions   to that Work or Derivative Works thereof, that is intentionally   submitted to Licensor for inclusion in the Work by the copyright owner   or by an individual or Legal Entity authorized to submit on behalf of   the copyright owner. For the purposes of this definition, \"submitted\"   means any form of electronic, verbal, or written communication sent   to the Licensor or its representatives, including but not limited to   communication on electronic mailing lists, source code control systems,   and issue tracking systems that are managed by, or on behalf of, the   Licensor for the purpose of discussing and improving the Work, but   excluding communication that is conspicuously marked or otherwise   designated in writing by the copyright owner as \"Not a Contribution.\"</p> <p>\"Contributor\" shall mean Licensor and any individual or Legal Entity   on behalf of whom a Contribution has been received by Licensor and   subsequently incorporated within the Work.</p> </li> <li> <p>Grant of Copyright License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       copyright license to reproduce, prepare Derivative Works of,       publicly display, publicly perform, sublicense, and distribute the       Work and such Derivative Works in Source or Object form.</p> </li> <li> <p>Grant of Patent License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       (except as stated in this section) patent license to make, have made,       use, offer to sell, sell, import, and otherwise transfer the Work,       where such license applies only to those patent claims licensable       by such Contributor that are necessarily infringed by their       Contribution(s) alone or by combination of their Contribution(s)       with the Work to which such Contribution(s) was submitted. If You       institute patent litigation against any entity (including a       cross-claim or counterclaim in a lawsuit) alleging that the Work       or a Contribution incorporated within the Work constitutes direct       or contributory patent infringement, then any patent licenses       granted to You under this License for that Work shall terminate       as of the date such litigation is filed.</p> </li> <li> <p>Redistribution. You may reproduce and distribute copies of the       Work or Derivative Works thereof in any medium, with or without       modifications, and in Source or Object form, provided that You       meet the following conditions:</p> <p>(a) You must give any other recipients of the Work or       Derivative Works a copy of this License; and</p> <p>(b) You must cause any modified files to carry prominent notices       stating that You changed the files; and</p> <p>(c) You must retain, in the Source form of any Derivative Works       that You distribute, all copyright, patent, trademark, and       attribution notices from the Source form of the Work,       excluding those notices that do not pertain to any part of       the Derivative Works; and</p> <p>(d) If the Work includes a \"NOTICE\" text file as part of its       distribution, then any Derivative Works that You distribute must       include a readable copy of the attribution notices contained       within such NOTICE file, excluding those notices that do not       pertain to any part of the Derivative Works, in at least one       of the following places: within a NOTICE text file distributed       as part of the Derivative Works; within the Source form or       documentation, if provided along with the Derivative Works; or,       within a display generated by the Derivative Works, if and       wherever such third-party notices normally appear. The contents       of the NOTICE file are for informational purposes only and       do not modify the License. You may add Your own attribution       notices within Derivative Works that You distribute, alongside       or as an addendum to the NOTICE text from the Work, provided       that such additional attribution notices cannot be construed       as modifying the License.</p> <p>You may add Your own copyright statement to Your modifications and   may provide additional or different license terms and conditions   for use, reproduction, or distribution of Your modifications, or   for any such Derivative Works as a whole, provided Your use,   reproduction, and distribution of the Work otherwise complies with   the conditions stated in this License.</p> </li> <li> <p>Submission of Contributions. Unless You explicitly state otherwise,       any Contribution intentionally submitted for inclusion in the Work       by You to the Licensor shall be under the terms and conditions of       this License, without any additional terms or conditions.       Notwithstanding the above, nothing herein shall supersede or modify       the terms of any separate license agreement you may have executed       with Licensor regarding such Contributions.</p> </li> <li> <p>Trademarks. This License does not grant permission to use the trade       names, trademarks, service marks, or product names of the Licensor,       except as required for reasonable and customary use in describing the       origin of the Work and reproducing the content of the NOTICE file.</p> </li> <li> <p>Disclaimer of Warranty. Unless required by applicable law or       agreed to in writing, Licensor provides the Work (and each       Contributor provides its Contributions) on an \"AS IS\" BASIS,       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       implied, including, without limitation, any warranties or conditions       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A       PARTICULAR PURPOSE. You are solely responsible for determining the       appropriateness of using or redistributing the Work and assume any       risks associated with Your exercise of permissions under this License.</p> </li> <li> <p>Limitation of Liability. In no event and under no legal theory,       whether in tort (including negligence), contract, or otherwise,       unless required by applicable law (such as deliberate and grossly       negligent acts) or agreed to in writing, shall any Contributor be       liable to You for damages, including any direct, indirect, special,       incidental, or consequential damages of any character arising as a       result of this License or out of the use or inability to use the       Work (including but not limited to damages for loss of goodwill,       work stoppage, computer failure or malfunction, or any and all       other commercial damages or losses), even if such Contributor       has been advised of the possibility of such damages.</p> </li> <li> <p>Accepting Warranty or Additional Liability. While redistributing       the Work or Derivative Works thereof, You may choose to offer,       and charge a fee for, acceptance of support, warranty, indemnity,       or other liability obligations and/or rights consistent with this       License. However, in accepting such obligations, You may act only       on Your own behalf and on Your sole responsibility, not on behalf       of any other Contributor, and only if You agree to indemnify,       defend, and hold each Contributor harmless for any liability       incurred by, or claims asserted against, such Contributor by reason       of your accepting any such warranty or additional liability.</p> </li> </ol> <p>END OF TERMS AND CONDITIONS</p> <p>APPENDIX: How to apply the Apache License to your work.</p> <pre><code>  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.\n</code></pre> <p>Copyright [yyyy][name of copyright owner]</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\");    you may not use this file except in compliance with the License.    You may obtain a copy of the License at</p> <pre><code>   http://www.apache.org/licenses/LICENSE-2.0\n</code></pre> <p>Unless required by applicable law or agreed to in writing, software    distributed under the License is distributed on an \"AS IS\" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    See the License for the specific language governing permissions and    limitations under the License.</p>"},{"location":"autoapi/summary.html","title":"Summary","text":"<ul> <li>client<ul> <li>ayon_third_party<ul> <li>addon</li> <li>constants</li> <li>download_ui</li> <li>utils</li> <li>version</li> </ul> </li> </ul> </li> <li>server<ul> <li>settings</li> </ul> </li> </ul>"},{"location":"autoapi/client/ayon_third_party/index.html","title":"ayon_third_party","text":""},{"location":"autoapi/client/ayon_third_party/index.html#client.ayon_third_party.ThirdPartyDistAddon","title":"<code>ThirdPartyDistAddon</code>","text":"<p>               Bases: <code>AYONAddon</code>, <code>ITrayAddon</code></p> <p>Addon to deploy 3rd party binary dependencies.</p> <p>Addon can also skip distribution of binaries from server and can use path/arguments defined by server.</p> <p>Cares about supplying ffmpeg and oiiotool executables.</p> Source code in <code>client/ayon_third_party/addon.py</code> <pre><code>class ThirdPartyDistAddon(AYONAddon, ITrayAddon):\n    \"\"\"Addon to deploy 3rd party binary dependencies.\n\n    Addon can also skip distribution of binaries from server and can\n    use path/arguments defined by server.\n\n    Cares about supplying ffmpeg and oiiotool executables.\n    \"\"\"\n\n    name = ADDON_NAME\n    version = __version__\n\n    def initialize(self, settings):\n        self._download_window = None\n\n    def tray_exit(self):\n        pass\n\n    def tray_menu(self, tray_menu):\n        pass\n\n    def tray_init(self):\n        pass\n\n    def tray_start(self):\n        download_ffmpeg = is_ffmpeg_download_needed()\n        download_oiio = is_oiio_download_needed()\n        if not download_oiio and not download_ffmpeg:\n            return\n\n        from .download_ui import show_download_window\n\n        download_window = show_download_window(\n            download_ffmpeg, download_oiio\n        )\n        download_window.finished.connect(self._on_download_finish)\n        download_window.start()\n        self._download_window = download_window\n\n    def _on_download_finish(self):\n        self._download_window.close()\n        self._download_window = None\n</code></pre>"},{"location":"autoapi/client/ayon_third_party/index.html#client.ayon_third_party.download_ffmpeg","title":"<code>download_ffmpeg(progress=None)</code>","text":"<p>Download ffmpeg from server.</p> Todos <p>Add safeguard to avoid downloading of the file from multiple     processes at once.</p> <p>Parameters:</p> Name Type Description Default <code>progress</code> <code>TransferProgress</code> <p>Keep track about download.</p> <code>None</code> Source code in <code>client/ayon_third_party/utils.py</code> <pre><code>def download_ffmpeg(\n    progress: Optional[TransferProgress] = None,\n):\n    \"\"\"Download ffmpeg from server.\n\n    Todos:\n        Add safeguard to avoid downloading of the file from multiple\n            processes at once.\n\n    Args:\n        progress (ayon_api.TransferProgress): Keep track about download.\n\n    \"\"\"\n\n    files_info = get_server_files_info()\n    file_info = _find_file_info(\"ffmpeg\", files_info)\n    if file_info is None:\n        raise ValueError((\n            \"Couldn't find ffmpeg source file for platform '{}'\"\n        ).format(platform.system()))\n\n    dirpath = get_downloaded_ffmpeg_root()\n    log.debug(f\"Downloading ffmpeg into: '{dirpath}'\")\n    if not _download_file(file_info, dirpath, progress=progress):\n        log.debug(\"Other processed already downloaded and extracted ffmpeg.\")\n\n    _FFmpegArgs.download_needed = False\n    _FFmpegArgs.downloaded_root = NOT_SET\n</code></pre>"},{"location":"autoapi/client/ayon_third_party/index.html#client.ayon_third_party.get_ffmpeg_arguments","title":"<code>get_ffmpeg_arguments(tool_name='ffmpeg')</code>","text":"<p>Get arguments to run one of ffmpeg tools.</p> <p>Parameters:</p> Name Type Description Default <code>tool_name</code> <code>FFmpegToolname</code> <p>Name of tool for which arguments should be returned.</p> <code>'ffmpeg'</code> <p>Returns:</p> Type Description <code>Optional[List[str]]</code> <p>list[str]: Path to OpenImageIO directory.</p> Source code in <code>client/ayon_third_party/utils.py</code> <pre><code>def get_ffmpeg_arguments(\n    tool_name: \"FFmpegToolname\" = \"ffmpeg\"\n) -&gt; Optional[List[str]]:\n    \"\"\"Get arguments to run one of ffmpeg tools.\n\n    Args:\n        tool_name (FFmpegToolname): Name of\n            tool for which arguments should be returned.\n\n    Returns:\n        list[str]: Path to OpenImageIO directory.\n\n    \"\"\"\n    args = _FFmpegArgs.tools.get(tool_name, NOT_SET)\n    if args is NOT_SET:\n        args = _fill_ffmpeg_tool_args(tool_name)\n    return copy.deepcopy(args)\n</code></pre>"},{"location":"autoapi/client/ayon_third_party/index.html#client.ayon_third_party.get_oiio_arguments","title":"<code>get_oiio_arguments(tool_name='oiiotool')</code>","text":"<p>Get arguments to run one of OpenImageIO tools.</p> Possible OIIO tools <p>oiiotool, maketx, iv, iinfo, igrep, idiff, iconvert</p> <p>Parameters:</p> Name Type Description Default <code>tool_name</code> <code>OIIOToolName</code> <p>Name of OIIO tool.</p> <code>'oiiotool'</code> <p>Returns:</p> Name Type Description <code>str</code> <code>Optional[List[str]]</code> <p>Path to zip info file.</p> Source code in <code>client/ayon_third_party/utils.py</code> <pre><code>def get_oiio_arguments(\n    tool_name: \"OIIOToolName\" = \"oiiotool\"\n) -&gt; Optional[List[str]]:\n    \"\"\"Get arguments to run one of OpenImageIO tools.\n\n    Possible OIIO tools:\n        oiiotool, maketx, iv, iinfo, igrep, idiff, iconvert\n\n    Args:\n        tool_name (OIIOToolName): Name of OIIO tool.\n\n    Returns:\n        str: Path to zip info file.\n\n    \"\"\"\n    args = _OIIOArgs.tools.get(tool_name, NOT_SET)\n    if args is NOT_SET:\n        args = _fill_oiio_tool_args(tool_name)\n    return copy.deepcopy(args)\n</code></pre>"},{"location":"autoapi/client/ayon_third_party/index.html#client.ayon_third_party.is_ffmpeg_download_needed","title":"<code>is_ffmpeg_download_needed(addon_settings=None)</code>","text":"<p>Check if is download needed.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Should be config downloaded.</p> Source code in <code>client/ayon_third_party/utils.py</code> <pre><code>def is_ffmpeg_download_needed(\n    addon_settings: Optional[Dict[str, Any]] = None\n) -&gt; bool:\n    \"\"\"Check if is download needed.\n\n    Returns:\n        bool: Should be config downloaded.\n\n    \"\"\"\n    if _FFmpegArgs.download_needed is not None:\n        return _FFmpegArgs.download_needed\n\n    if addon_settings is None:\n        addon_settings = get_addon_settings()\n    ffmpeg_settings = addon_settings[\"ffmpeg\"]\n    download_needed = False\n    if ffmpeg_settings[\"use_downloaded\"]:\n        # Check what is required by server\n        ffmpeg_root = get_downloaded_ffmpeg_root()\n        progress_info = {}\n        if ffmpeg_root:\n            progress_path = os.path.join(\n                ffmpeg_root, DIST_PROGRESS_FILENAME\n            )\n            progress_info = _read_progress_file(progress_path)\n        download_needed = progress_info.get(\"state\") != \"done\"\n\n    _FFmpegArgs.download_needed = download_needed\n    return _FFmpegArgs.download_needed\n</code></pre>"},{"location":"autoapi/client/ayon_third_party/index.html#client.ayon_third_party.is_oiio_download_needed","title":"<code>is_oiio_download_needed(addon_settings=None)</code>","text":"<p>Check if is download needed.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Should be config downloaded.</p> Source code in <code>client/ayon_third_party/utils.py</code> <pre><code>def is_oiio_download_needed(\n    addon_settings: Optional[Dict[str, Any]] = None\n) -&gt; bool:\n    \"\"\"Check if is download needed.\n\n    Returns:\n        bool: Should be config downloaded.\n\n    \"\"\"\n    if _OIIOArgs.download_needed is not None:\n        return _OIIOArgs.download_needed\n\n    if addon_settings is None:\n        addon_settings = get_addon_settings()\n    oiio_settings = addon_settings[\"oiio\"]\n\n    download_needed = False\n    if oiio_settings[\"use_downloaded\"]:\n        oiio_root = get_downloaded_oiio_root()\n        progress_info = {}\n        if oiio_root:\n            progress_path = os.path.join(\n                oiio_root, DIST_PROGRESS_FILENAME\n            )\n            progress_info = _read_progress_file(progress_path)\n        download_needed = progress_info.get(\"state\") != \"done\"\n    _OIIOArgs.download_needed = download_needed\n    return _OIIOArgs.download_needed\n</code></pre>"},{"location":"autoapi/client/ayon_third_party/addon.html","title":"addon","text":""},{"location":"autoapi/client/ayon_third_party/addon.html#client.ayon_third_party.addon.ThirdPartyDistAddon","title":"<code>ThirdPartyDistAddon</code>","text":"<p>               Bases: <code>AYONAddon</code>, <code>ITrayAddon</code></p> <p>Addon to deploy 3rd party binary dependencies.</p> <p>Addon can also skip distribution of binaries from server and can use path/arguments defined by server.</p> <p>Cares about supplying ffmpeg and oiiotool executables.</p> Source code in <code>client/ayon_third_party/addon.py</code> <pre><code>class ThirdPartyDistAddon(AYONAddon, ITrayAddon):\n    \"\"\"Addon to deploy 3rd party binary dependencies.\n\n    Addon can also skip distribution of binaries from server and can\n    use path/arguments defined by server.\n\n    Cares about supplying ffmpeg and oiiotool executables.\n    \"\"\"\n\n    name = ADDON_NAME\n    version = __version__\n\n    def initialize(self, settings):\n        self._download_window = None\n\n    def tray_exit(self):\n        pass\n\n    def tray_menu(self, tray_menu):\n        pass\n\n    def tray_init(self):\n        pass\n\n    def tray_start(self):\n        download_ffmpeg = is_ffmpeg_download_needed()\n        download_oiio = is_oiio_download_needed()\n        if not download_oiio and not download_ffmpeg:\n            return\n\n        from .download_ui import show_download_window\n\n        download_window = show_download_window(\n            download_ffmpeg, download_oiio\n        )\n        download_window.finished.connect(self._on_download_finish)\n        download_window.start()\n        self._download_window = download_window\n\n    def _on_download_finish(self):\n        self._download_window.close()\n        self._download_window = None\n</code></pre>"},{"location":"autoapi/client/ayon_third_party/constants.html","title":"constants","text":""},{"location":"autoapi/client/ayon_third_party/download_ui.html","title":"download_ui","text":""},{"location":"autoapi/client/ayon_third_party/utils.html","title":"utils","text":""},{"location":"autoapi/client/ayon_third_party/utils.html#client.ayon_third_party.utils.ZipFileLongPaths","title":"<code>ZipFileLongPaths</code>","text":"<p>               Bases: <code>ZipFile</code></p> <p>Allows longer paths in zip files.</p> <p>Regular DOS paths are limited to MAX_PATH (260) characters, including the string's terminating NUL character. That limit can be exceeded by using an extended-length path that starts with the '\\?' prefix.</p> Source code in <code>client/ayon_third_party/utils.py</code> <pre><code>class ZipFileLongPaths(zipfile.ZipFile):\n    \"\"\"Allows longer paths in zip files.\n\n    Regular DOS paths are limited to MAX_PATH (260) characters, including\n    the string's terminating NUL character.\n    That limit can be exceeded by using an extended-length path that\n    starts with the '\\\\?\\' prefix.\n    \"\"\"\n    _is_windows = platform.system().lower() == \"windows\"\n\n    def _extract_member(self, member, tpath, pwd):\n        if self._is_windows:\n            tpath = os.path.abspath(tpath)\n            if tpath.startswith(\"\\\\\\\\\"):\n                tpath = \"\\\\\\\\?\\\\UNC\\\\\" + tpath[2:]\n            else:\n                tpath = \"\\\\\\\\?\\\\\" + tpath\n\n        return super()._extract_member(member, tpath, pwd)\n</code></pre>"},{"location":"autoapi/client/ayon_third_party/utils.html#client.ayon_third_party.utils.calculate_file_checksum","title":"<code>calculate_file_checksum(filepath, checksum_algorithm, chunk_size=10000)</code>","text":"<p>Calculate file checksum for given algorithm.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>Path to a file.</p> required <code>checksum_algorithm</code> <code>str</code> <p>Algorithm to use. ('md5', 'sha1', 'sha256')</p> required <code>chunk_size</code> <code>int</code> <p>Chunk size to read file. Defaults to 10000.</p> <code>10000</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Calculated checksum.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>File not found or unknown checksum algorithm.</p> Source code in <code>client/ayon_third_party/utils.py</code> <pre><code>def calculate_file_checksum(\n    filepath: str,\n    checksum_algorithm: str,\n    chunk_size: int = 10000,\n) -&gt; str:\n    \"\"\"Calculate file checksum for given algorithm.\n\n    Args:\n        filepath (str): Path to a file.\n        checksum_algorithm (str): Algorithm to use. ('md5', 'sha1', 'sha256')\n        chunk_size (int): Chunk size to read file.\n            Defaults to 10000.\n\n    Returns:\n        str: Calculated checksum.\n\n    Raises:\n        ValueError: File not found or unknown checksum algorithm.\n\n    \"\"\"\n    if not filepath:\n        raise ValueError(\"Filepath is empty.\")\n\n    if not os.path.exists(filepath):\n        raise ValueError(f\"{filepath} doesn't exist.\")\n\n    if not os.path.isfile(filepath):\n        raise ValueError(f\"{filepath} is not a file.\")\n\n    func = getattr(hashlib, checksum_algorithm, None)\n    if func is None:\n        raise ValueError(\n            f\"Unknown checksum algorithm '{checksum_algorithm}'\"\n        )\n\n    hash_obj = func()\n    with open(filepath, \"rb\") as f:\n        for chunk in iter(lambda: f.read(chunk_size), b\"\"):\n            hash_obj.update(chunk)\n    return hash_obj.hexdigest()\n</code></pre>"},{"location":"autoapi/client/ayon_third_party/utils.html#client.ayon_third_party.utils.download_ffmpeg","title":"<code>download_ffmpeg(progress=None)</code>","text":"<p>Download ffmpeg from server.</p> Todos <p>Add safeguard to avoid downloading of the file from multiple     processes at once.</p> <p>Parameters:</p> Name Type Description Default <code>progress</code> <code>TransferProgress</code> <p>Keep track about download.</p> <code>None</code> Source code in <code>client/ayon_third_party/utils.py</code> <pre><code>def download_ffmpeg(\n    progress: Optional[TransferProgress] = None,\n):\n    \"\"\"Download ffmpeg from server.\n\n    Todos:\n        Add safeguard to avoid downloading of the file from multiple\n            processes at once.\n\n    Args:\n        progress (ayon_api.TransferProgress): Keep track about download.\n\n    \"\"\"\n\n    files_info = get_server_files_info()\n    file_info = _find_file_info(\"ffmpeg\", files_info)\n    if file_info is None:\n        raise ValueError((\n            \"Couldn't find ffmpeg source file for platform '{}'\"\n        ).format(platform.system()))\n\n    dirpath = get_downloaded_ffmpeg_root()\n    log.debug(f\"Downloading ffmpeg into: '{dirpath}'\")\n    if not _download_file(file_info, dirpath, progress=progress):\n        log.debug(\"Other processed already downloaded and extracted ffmpeg.\")\n\n    _FFmpegArgs.download_needed = False\n    _FFmpegArgs.downloaded_root = NOT_SET\n</code></pre>"},{"location":"autoapi/client/ayon_third_party/utils.html#client.ayon_third_party.utils.extract_archive_file","title":"<code>extract_archive_file(archive_file, dst_folder=None)</code>","text":"<p>Extract archived file to a directory.</p> <p>Parameters:</p> Name Type Description Default <code>archive_file</code> <code>str</code> <p>Path to a archive file.</p> required <code>dst_folder</code> <code>Optional[str]</code> <p>Directory where content will be extracted. By default, same folder where archive file is.</p> <code>None</code> Source code in <code>client/ayon_third_party/utils.py</code> <pre><code>def extract_archive_file(\n    archive_file: str,\n    dst_folder: Optional[str] = None,\n):\n    \"\"\"Extract archived file to a directory.\n\n    Args:\n        archive_file (str): Path to a archive file.\n        dst_folder (Optional[str]): Directory where content will be extracted.\n            By default, same folder where archive file is.\n\n    \"\"\"\n    if not dst_folder:\n        dst_folder = os.path.dirname(archive_file)\n\n    archive_ext, archive_type = get_archive_ext_and_type(archive_file)\n\n    print(\"Extracting {} -&gt; {}\".format(archive_file, dst_folder))\n    if archive_type is None:\n        _, ext = os.path.splitext(archive_file)\n        raise ValueError((\n            f\"Invalid file extension \\\"{ext}\\\".\"\n            f\" Expected {', '.join(IMPLEMENTED_ARCHIVE_FORMATS)}\"\n        ))\n\n    if archive_type == \"zip\":\n        zip_file = ZipFileLongPaths(archive_file)\n        zip_file.extractall(dst_folder)\n        zip_file.close()\n\n    elif archive_type == \"tar\":\n        if archive_ext == \".tar\":\n            tar_type = \"r:\"\n        elif archive_ext.endswith(\".xz\"):\n            tar_type = \"r:xz\"\n        elif archive_ext.endswith(\".gz\"):\n            tar_type = \"r:gz\"\n        elif archive_ext.endswith(\".bz2\"):\n            tar_type = \"r:bz2\"\n        else:\n            tar_type = \"r:*\"\n\n        try:\n            tar_file = tarfile.open(archive_file, tar_type)\n        except tarfile.ReadError:\n            raise ValueError(\"corrupted archive\")\n\n        tar_file.extractall(dst_folder)\n        tar_file.close()\n</code></pre>"},{"location":"autoapi/client/ayon_third_party/utils.html#client.ayon_third_party.utils.get_archive_ext_and_type","title":"<code>get_archive_ext_and_type(archive_file)</code>","text":"<p>Get archive extension and type.</p> <p>Parameters:</p> Name Type Description Default <code>archive_file</code> <code>str</code> <p>Path to archive file.</p> required <p>Returns:</p> Type Description <code>Tuple[Optional[str], Optional[str]]</code> <p>Tuple[str, str]: Archive extension and type.</p> Source code in <code>client/ayon_third_party/utils.py</code> <pre><code>def get_archive_ext_and_type(\n    archive_file: str\n) -&gt; Tuple[Optional[str], Optional[str]]:\n    \"\"\"Get archive extension and type.\n\n    Args:\n        archive_file (str): Path to archive file.\n\n    Returns:\n        Tuple[str, str]: Archive extension and type.\n\n    \"\"\"\n    tmp_name = archive_file.lower()\n    if tmp_name.endswith(\".zip\"):\n        return \".zip\", \"zip\"\n\n    for ext in (\n        \".tar\",\n        \".tgz\",\n        \".tar.gz\",\n        \".tar.xz\",\n        \".tar.bz2\",\n    ):\n        if tmp_name.endswith(ext):\n            return ext, \"tar\"\n\n    return None, None\n</code></pre>"},{"location":"autoapi/client/ayon_third_party/utils.html#client.ayon_third_party.utils.get_ffmpeg_arguments","title":"<code>get_ffmpeg_arguments(tool_name='ffmpeg')</code>","text":"<p>Get arguments to run one of ffmpeg tools.</p> <p>Parameters:</p> Name Type Description Default <code>tool_name</code> <code>FFmpegToolname</code> <p>Name of tool for which arguments should be returned.</p> <code>'ffmpeg'</code> <p>Returns:</p> Type Description <code>Optional[List[str]]</code> <p>list[str]: Path to OpenImageIO directory.</p> Source code in <code>client/ayon_third_party/utils.py</code> <pre><code>def get_ffmpeg_arguments(\n    tool_name: \"FFmpegToolname\" = \"ffmpeg\"\n) -&gt; Optional[List[str]]:\n    \"\"\"Get arguments to run one of ffmpeg tools.\n\n    Args:\n        tool_name (FFmpegToolname): Name of\n            tool for which arguments should be returned.\n\n    Returns:\n        list[str]: Path to OpenImageIO directory.\n\n    \"\"\"\n    args = _FFmpegArgs.tools.get(tool_name, NOT_SET)\n    if args is NOT_SET:\n        args = _fill_ffmpeg_tool_args(tool_name)\n    return copy.deepcopy(args)\n</code></pre>"},{"location":"autoapi/client/ayon_third_party/utils.html#client.ayon_third_party.utils.get_oiio_arguments","title":"<code>get_oiio_arguments(tool_name='oiiotool')</code>","text":"<p>Get arguments to run one of OpenImageIO tools.</p> Possible OIIO tools <p>oiiotool, maketx, iv, iinfo, igrep, idiff, iconvert</p> <p>Parameters:</p> Name Type Description Default <code>tool_name</code> <code>OIIOToolName</code> <p>Name of OIIO tool.</p> <code>'oiiotool'</code> <p>Returns:</p> Name Type Description <code>str</code> <code>Optional[List[str]]</code> <p>Path to zip info file.</p> Source code in <code>client/ayon_third_party/utils.py</code> <pre><code>def get_oiio_arguments(\n    tool_name: \"OIIOToolName\" = \"oiiotool\"\n) -&gt; Optional[List[str]]:\n    \"\"\"Get arguments to run one of OpenImageIO tools.\n\n    Possible OIIO tools:\n        oiiotool, maketx, iv, iinfo, igrep, idiff, iconvert\n\n    Args:\n        tool_name (OIIOToolName): Name of OIIO tool.\n\n    Returns:\n        str: Path to zip info file.\n\n    \"\"\"\n    args = _OIIOArgs.tools.get(tool_name, NOT_SET)\n    if args is NOT_SET:\n        args = _fill_oiio_tool_args(tool_name)\n    return copy.deepcopy(args)\n</code></pre>"},{"location":"autoapi/client/ayon_third_party/utils.html#client.ayon_third_party.utils.get_server_files_info","title":"<code>get_server_files_info()</code>","text":"<p>Receive zip file info from server.</p> <p>Information must contain at least 'filename' and 'hash' with md5 zip file hash.</p> <p>Returns:</p> Type Description <code>List[ToolDownloadInfo]</code> <p>list[dict[str, str]]: Information about files on server.</p> Source code in <code>client/ayon_third_party/utils.py</code> <pre><code>def get_server_files_info() -&gt; List[\"ToolDownloadInfo\"]:\n    \"\"\"Receive zip file info from server.\n\n    Information must contain at least 'filename' and 'hash' with md5 zip\n    file hash.\n\n    Returns:\n        list[dict[str, str]]: Information about files on server.\n\n    \"\"\"\n    # Cache server files info, they won't change\n    if _ThirdPartyCache.server_files_info is None:\n        endpoint = _get_addon_endpoint()\n        response = ayon_api.get(f\"{endpoint}/files_info\")\n        response.raise_for_status()\n        _ThirdPartyCache.server_files_info = response.data\n    return copy.deepcopy(_ThirdPartyCache.server_files_info)\n</code></pre>"},{"location":"autoapi/client/ayon_third_party/utils.html#client.ayon_third_party.utils.is_ffmpeg_download_needed","title":"<code>is_ffmpeg_download_needed(addon_settings=None)</code>","text":"<p>Check if is download needed.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Should be config downloaded.</p> Source code in <code>client/ayon_third_party/utils.py</code> <pre><code>def is_ffmpeg_download_needed(\n    addon_settings: Optional[Dict[str, Any]] = None\n) -&gt; bool:\n    \"\"\"Check if is download needed.\n\n    Returns:\n        bool: Should be config downloaded.\n\n    \"\"\"\n    if _FFmpegArgs.download_needed is not None:\n        return _FFmpegArgs.download_needed\n\n    if addon_settings is None:\n        addon_settings = get_addon_settings()\n    ffmpeg_settings = addon_settings[\"ffmpeg\"]\n    download_needed = False\n    if ffmpeg_settings[\"use_downloaded\"]:\n        # Check what is required by server\n        ffmpeg_root = get_downloaded_ffmpeg_root()\n        progress_info = {}\n        if ffmpeg_root:\n            progress_path = os.path.join(\n                ffmpeg_root, DIST_PROGRESS_FILENAME\n            )\n            progress_info = _read_progress_file(progress_path)\n        download_needed = progress_info.get(\"state\") != \"done\"\n\n    _FFmpegArgs.download_needed = download_needed\n    return _FFmpegArgs.download_needed\n</code></pre>"},{"location":"autoapi/client/ayon_third_party/utils.html#client.ayon_third_party.utils.is_oiio_download_needed","title":"<code>is_oiio_download_needed(addon_settings=None)</code>","text":"<p>Check if is download needed.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Should be config downloaded.</p> Source code in <code>client/ayon_third_party/utils.py</code> <pre><code>def is_oiio_download_needed(\n    addon_settings: Optional[Dict[str, Any]] = None\n) -&gt; bool:\n    \"\"\"Check if is download needed.\n\n    Returns:\n        bool: Should be config downloaded.\n\n    \"\"\"\n    if _OIIOArgs.download_needed is not None:\n        return _OIIOArgs.download_needed\n\n    if addon_settings is None:\n        addon_settings = get_addon_settings()\n    oiio_settings = addon_settings[\"oiio\"]\n\n    download_needed = False\n    if oiio_settings[\"use_downloaded\"]:\n        oiio_root = get_downloaded_oiio_root()\n        progress_info = {}\n        if oiio_root:\n            progress_path = os.path.join(\n                oiio_root, DIST_PROGRESS_FILENAME\n            )\n            progress_info = _read_progress_file(progress_path)\n        download_needed = progress_info.get(\"state\") != \"done\"\n    _OIIOArgs.download_needed = download_needed\n    return _OIIOArgs.download_needed\n</code></pre>"},{"location":"autoapi/client/ayon_third_party/utils.html#client.ayon_third_party.utils.validate_ffmpeg_args","title":"<code>validate_ffmpeg_args(args)</code>","text":"<p>Validate ffmpeg arguments.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>list[str]</code> <p>ffmpeg arguments.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if arguments are valid.</p> Source code in <code>client/ayon_third_party/utils.py</code> <pre><code>def validate_ffmpeg_args(args: List[str]) -&gt; bool:\n    \"\"\"Validate ffmpeg arguments.\n\n    Args:\n        args (list[str]): ffmpeg arguments.\n\n    Returns:\n        bool: True if arguments are valid.\n\n    \"\"\"\n    if not args:\n        return False\n    return _check_args_returncode(args + [\"-version\"])\n</code></pre>"},{"location":"autoapi/client/ayon_third_party/utils.html#client.ayon_third_party.utils.validate_file_checksum","title":"<code>validate_file_checksum(filepath, checksum, checksum_algorithm)</code>","text":"<p>Validate file checksum.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>Path to file.</p> required <code>checksum</code> <code>str</code> <p>Hash of file.</p> required <code>checksum_algorithm</code> <code>str</code> <p>Type of checksum.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Hash is valid/invalid.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>File not found or unknown checksum algorithm.</p> Source code in <code>client/ayon_third_party/utils.py</code> <pre><code>def validate_file_checksum(\n    filepath: str,\n    checksum: str,\n    checksum_algorithm: str,\n) -&gt; bool:\n    \"\"\"Validate file checksum.\n\n    Args:\n        filepath (str): Path to file.\n        checksum (str): Hash of file.\n        checksum_algorithm (str): Type of checksum.\n\n    Returns:\n        bool: Hash is valid/invalid.\n\n    Raises:\n        ValueError: File not found or unknown checksum algorithm.\n\n    \"\"\"\n    return checksum == calculate_file_checksum(filepath, checksum_algorithm)\n</code></pre>"},{"location":"autoapi/client/ayon_third_party/utils.html#client.ayon_third_party.utils.validate_oiio_args","title":"<code>validate_oiio_args(args)</code>","text":"<p>Validate oiio arguments.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>list[str]</code> <p>oiio arguments.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if arguments are valid.</p> Source code in <code>client/ayon_third_party/utils.py</code> <pre><code>def validate_oiio_args(args: List[str]) -&gt; bool:\n    \"\"\"Validate oiio arguments.\n\n    Args:\n        args (list[str]): oiio arguments.\n\n    Returns:\n        bool: True if arguments are valid.\n\n    \"\"\"\n    if not args:\n        return False\n    return _check_args_returncode(args + [\"--help\"])\n</code></pre>"},{"location":"autoapi/client/ayon_third_party/version.html","title":"version","text":"<p>Package declaring AYON addon 'ayon_third_party' version.</p>"},{"location":"autoapi/server/index.html","title":"server","text":""},{"location":"autoapi/server/settings.html","title":"settings","text":""},{"location":"autoapi/server/settings.html#server.settings.ThirdPartySettings","title":"<code>ThirdPartySettings</code>","text":"<p>               Bases: <code>BaseSettingsModel</code></p> <p>Third party addon settings.</p> Source code in <code>server/settings.py</code> <pre><code>class ThirdPartySettings(BaseSettingsModel):\n    \"\"\"Third party addon settings.\"\"\"\n\n    ffmpeg: FFmpegSettings = Field(\n        default_factory=FFmpegSettings,\n        title=\"FFmpeg\",\n    )\n    oiio: OIIOSettings = Field(\n        default_factory=OIIOSettings,\n        title=\"OpenImageIO\",\n    )\n</code></pre>"}]}